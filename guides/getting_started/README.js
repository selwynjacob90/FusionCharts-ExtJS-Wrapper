Ext.data.JsonP.getting_started({"guide":"<h1>Getting Started Guide</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/getting_started-section-1'>Usage</a></li>\n<li><a href='#!/guide/getting_started-section-2'>Updating Charts</a></li>\n</ol>\n</div>\n\n<p>This is a wrapper around FusionCharts which lets you use FusionCharts charts as native ExtJS components.\nYou can use FusionChats ExtJS component in either ExtJS MVC way or as a normal ExtJS application.</p>\n\n<h2 id='getting_started-section-1'>Usage</h2>\n\n<ul>\n<li>Download and extract the contents of the plugin. It contains the FusionCharts ExtJS plugin and a couple of examples.</li>\n<li>Copy the FusionCharts directory to your ExtJS application root</li>\n<li><p>Require the plugin wherever you want to use FusionCharts ExtJS component</p>\n\n<pre><code>Ext.define('FCDemo.view.FCView' ,{\n   extend: 'Ext.tab.Panel',\n   requires: ['FusionCharts.core.Chart'] ...\n})\n</code></pre>\n\n<p>or</p>\n\n<pre><code>Ext.require(['FusionCharts.core.Chart'])\n</code></pre></li>\n<li><p>Use the FusionCharts component inside your application the way you would use any other ExtJS component.</p></li>\n<li><p>The xtype of the component is <code>fusioncharts</code>.</p>\n\n<pre><code>Ext.create('Ext.container.Viewport', {\n      layout: 'fit',\n      items: [\n          {\n             xtype: 'fusioncharts',\n             title: 'JSON URL',\n             chartType: 'Column3d',\n             chartID: 'firstChart',\n             chartWidth: '400',\n             chartHeight: '400',\n             debugMode: '0',\n             JSONUrl: 'data/chartData.json',\n          }\n      ]\n});\n</code></pre></li>\n<li><p>Only one of <code>JSONUrl</code> or <code>JSONObject</code> are mandatory and defaults are set for the other options if not specified</p></li>\n<li>Only one of <code>JSONUrl</code> or <code>JSONObject</code> should be used but if both are used, <code>JSONObject</code> overrides the <code>JSONUrl</code> data</li>\n<li><p>The following options are consumed by the fusioncharts component</p>\n\n<ul>\n<li><code>chartType</code> - Type of Chart. Defaults to Column2D</li>\n<li><code>chartID</code> - If you want to reference you chart elsewhere, you need to mention this and it has to unqiue for each chart</li>\n<li><code>chartWidth</code> - Default is set to 100%</li>\n<li><code>chartHeight</code> - Default is set to 100%</li>\n<li><code>debugMode</code> - Default is set to 0 [debug mode off]</li>\n<li><code>JSONUrl</code> - Path to the JSON file from the webroot or a url to JSON source</li>\n<li><code>JSONData</code> - JSON Object</li>\n</ul>\n</li>\n</ul>\n\n\n<h2 id='getting_started-section-2'>Updating Charts</h2>\n\n<p>You can update your chart type, dimnesions, JSONUrl and JSONObject anytime using the following utility methods</p>\n\n<ul>\n<li><p>updateChartType(newType) -> Updates the chart type</p>\n\n<pre><code>//query for fusioncharts xtype [if you have more than one chart use array subscript]\ncurrentChart = Ext.ComponentQuery.query('fusioncharts'); \ncurrentChart.updateChartType('Pie3D');\n</code></pre></li>\n<li><p>updateChartDimensions(newWidth, newHeight) -> Updates the chart dimensions</p>\n\n<pre><code>currentChart = Ext.ComponentQuery.query('fusioncharts');\n//if the dimensions are in pixels, just specify the number without px suffix \n//but if they are in percentages, suffix the % character\ncurrentChart.updateChartDimensions('200', '200');\n</code></pre></li>\n<li><p>updateChartJSONUrl(newUrl) -> Updates the path to the JSONUrl</p>\n\n<pre><code>currentChart = Ext.ComponentQuery.query('fusioncharts');\ncurrentChart.updateChartJSONUrl('data/chartData.json');\n</code></pre></li>\n<li><p>updateChartJSONObject(newObj) -> Updates the JSONObject from which the chart reads the data</p>\n\n<pre><code>currentChart = Ext.ComponentQuery.query('fusioncharts');\ncurrentChart.updateChartJSONObject('someJSObj');\n</code></pre></li>\n</ul>\n\n","title":"Getting Started with Ext JS 4"});